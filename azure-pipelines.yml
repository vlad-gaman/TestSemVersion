name: '$(Rev:r)'

trigger:
  - pr
  - main

pool:
  vmImage: ubuntu-latest

variables:
  - name: buildConfiguration
    value: 'Release'
  - name: isMaster
    value: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]

steps:
# This is a special way to retrieve the pipeline $(Rev:r) and store it in a variable
# It is also linked to the first line of code "name: '$(Rev:r)'"
# It also need to be the first thing to run
- script: |
      echo "##vso[task.setvariable variable=buildNumber;]$(Build.BuildNumber)"

- checkout: self
  persistCredentials: true
  fetchTags: false

- script: |
    git checkout $(System.PullRequest.SourceBranch)
    git switch $(System.PullRequest.SourceBranch)
  condition: eq(variables['Build.Reason'], 'PullRequest')
  displayName: Checkout source branch

- task: gitversion/setup@3.0.3
  displayName: Install GitVersion
  inputs:
    versionSpec: '5.x'

- task: gitversion/execute@3.0.3
  displayName: Use GitVersion
  name: GitVersion
  inputs:
    useConfigFile: true
    configFilePath: 'GitVersion.yml'
 
- script: |
      echo "##vso[task.setvariable variable=outputPackDir;]$(Build.ArtifactStagingDirectory)/Nupkgs/Stable"
      echo "##vso[task.setvariable variable=packConfiguration;]$(buildConfiguration)"
      echo "##vso[task.setvariable variable=tagName;]$(GitVersion.InformationalVersion).$(buildNumber)"
  condition: eq(variables['isMaster'], 'true')

- script: |
      echo "##vso[task.setvariable variable=outputPackDir;]$(Build.ArtifactStagingDirectory)/Nupkgs/Pre"
      echo "##vso[task.setvariable variable=packConfiguration;]Debug"
      echo "##vso[task.setvariable variable=tagName;]$(GitVersion.MajorMinorPatch)"
  condition: eq(variables['isMaster'], 'false')

- script: |
      echo $(buildConfiguration)
      echo $(isMaster)
      echo $(outputPackDir)
      echo $(packConfiguration)
      echo $(tagName)
      echo $(Build.SourceBranch)

- task: PublishPipelineArtifact@1
  displayName: 'Publish pipeline Artifacts'
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)'
    artifactName: drop
    publishLocation: 'Container'

- script: |
    git tag $(tagName)
    git push origin $(tagName)
  condition: ne(variables['Build.Reason'], 'PullRequest')
  workingDirectory: $(Build.SourcesDirectory)