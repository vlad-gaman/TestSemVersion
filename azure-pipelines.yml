name: '$(Rev:r)'

trigger:
  - pr
  - main

pool:
  vmImage: ubuntu-latest

variables:
  - name: buildConfiguration
    value: 'Release'
  - name: isMaster
    value: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  - name: outputPackDir
    $[ if eq(lower(variables['isMaster']), false) ]:
      value: '$(Build.ArtifactStagingDirectory)/Nupkgs/Stable'
    $[ elseif eq(lower(variables['isMaster']), 'True') ]:
      value: '$(Build.ArtifactStagingDirectory)/Nupkgs/Pre'
    $[ elseif eq(lower(variables['isMaster']), '') ]:
      value: 'Aoleu'
    $[ elseif eq(lower(variables['isMaster']), 'false') ]:
      value: 'Pe Bune'
  - name: packConfiguration
    ${{ if not(variables['isMaster']) }}:
      value: $(buildConfiguration)
    ${{ elseif variables['isMaster'] }}:
      value: 'Debug'
  - name: tagName
    ${{ if not(variables['isMaster']) }}:
      value: '$(GitVersion.MajorMinorPatch)'
    ${{ elseif variables['isMaster'] }}:
      value: '$(GitVersion.InformationalVersion).$(buildNumber)'

steps:
# This is a special way to retrieve the pipeline $(Rev:r) and store it in a variable
# It is also linked to the first line of code "name: '$(Rev:r)'"
# It also need to be the first thing to run
- script: |
      echo "##vso[task.setvariable variable=buildNumber;]$(Build.BuildNumber)"
      if []

- checkout: self
  persistCredentials: true
  fetchTags: false

- script: |
    git checkout $(System.PullRequest.SourceBranch)
    git switch $(System.PullRequest.SourceBranch)
  condition: eq(variables['Build.Reason'], 'PullRequest')
  displayName: Checkout source branch

- task: gitversion/setup@3.0.3
  displayName: Install GitVersion
  inputs:
    versionSpec: '5.x'

- task: gitversion/execute@3.0.3
  displayName: Use GitVersion
  name: GitVersion
  inputs:
    useConfigFile: true
    configFilePath: 'GitVersion.yml'

- script: |
      echo $(buildConfiguration)
      echo $(isMaster)
      echo $(outputPackDir)
      echo $(packConfiguration)
      echo $(tagName)
      echo $(Build.SourceBranch)

- task: PublishPipelineArtifact@1
  displayName: 'Publish pipeline Artifacts'
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)'
    artifactName: drop
    publishLocation: 'Container'

- script: |
    git tag $(tagName)
    git push origin $(tagName)
  condition: ne(variables['Build.Reason'], 'PullRequest')
  workingDirectory: $(Build.SourcesDirectory)